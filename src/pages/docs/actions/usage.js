import React from 'react';
import Link from 'gatsby-link';
import Template from '../../../components/templates/Documentation';
import Markdown from '../../../components/Markdown';
import Video from '../../../components/Video';
import Code from '../../../components/Code';
import image from '../../../assets/images/quickstart/setup/final.png';

export default (props) => {
  return (
    <Template
      title="Usage"
      subtitle="Generate a set of actions."
    >
      <h2>
        1. Follow usage process for Models
      </h2>
      <p>
        Navigate to the Models and Collections sections and follow the following steps in Usage:
      </p>
      <ul className="list-decimal pl-8">
        <li className="mb-2">
          Generate a set of models in /models.
        </li>
        <li className="mb-2">
          Generate a set of collections in /collections (if applicable).
        </li>
      </ul>

      <h2>
        2. Generate a set of actions
      </h2>
      <p>
        Create a folder in your project called <code>src/actions</code>. This folder will contain a
        set of files referred to as "actions", where the name of each file corresponds to an action
        creator.
      </p>
      <p>
        Most of the time, this folder will probably be empty. You only need to create actions if you
        need to override the default behavior for a specific blueprint, or if you need to add
        a custom action that isn't generated by one of the blueprints.
      </p>
      <p>
        For each actions you create, you can use the following code as a template:
      </p>

      <h3>src/actions/template.js</h3>
      <Code text={`
      export default function(params) {
        return function(dispatch) {
          // return dispatch({
          //   type: 'ACTION_NAME',
          //   payload: {}
          // });
        };
      };
      `}/>

      <h2>
        3. Invoke getActions()
      </h2>
      <p>
        Locate the entry point of your project and import the <code>getActions</code> function
        from <code>@lore/actions</code>.
      </p>

      <h3>index.js</h3>
      <Code text={`
      const config = {
        actions: require('./config/actions').default,
        collections: require('./config/models').default,
        connections: require('./config/connections').default,
        connectionMap: require('./config/connectionMap').default,
        models: require('./config/models').default
      };
      
      const modules = {
        actions: {
          tweet: require('./src/actions/custom').default,
        },
        collections: {
          // no collections
        },
        models: {
          tweet: require('./src/models/tweet').default,
          user: require('./src/models/user').default
        }
      };
      
      
      /*
       * Models
       *
       * An AJAX abstraction that reduces the boilerplate associated with creating,
       * retrieving, updating, and deleting a single resource in a REST API.
       *
       * These are instances of Model from @lore/backbone.
       */
      
      import { getModels } from '../../.lore/models';
      
      const models = getModels(config, {
        models: modules.models
      });
      
      
      /*
       * Collections
       *
       * An AJAX abstraction that reduces the boilerplate associated with searching,
       * filtering, and paginating resources in a REST API.
       *
       * These are instances of Collection from @lore/backbone.
       */
      
      import { getCollections } from '../../.lore/collections';
      
      const collections = getCollections(config, { models }, {
        models: modules.models,
        collections: modules.collections
      });
      
      
      /*
       * Actions/Action Creators
       *
       * A set of functions that dispatch actions containing payloads of information
       * that describe state changes in the application.
       *
       * https://redux.js.org/basics/actions
       *
       * In our case, these functions invoke the models and collections created above
       * to communicate with the REST API(s), and emit actions that describe what's
       * happening (such as creating, updating, and fetching data).
       */
      
      import { getActions } from '../../.lore/actions';
      
      const actions = getActions(config, { models, collections }, {
        models: modules.models,
        actions: modules.actions
      });
      `}/>

      <p>
        With this code we can now invoke specific actions from the actions object like this:
      </p>

      <Code text={`
      actions.tweet.find()(function(action) { 
        console.log(action.payload);
      })
      `}/>

    </Template>
  )
};
